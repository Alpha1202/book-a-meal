{"version":3,"sources":["../../api/models/meals.js"],"names":["p","getMealsFromFile","Promise","resolve","fs","readFile","err","fileContent","JSON","parse","Meal","id","name","price","imageUrl","catererId","meals","Number","length","push","writeFile","stringify","console","log","Error","message","existingMealIndex","findIndex","meal","updatedMeals","mealArray","Object","entries","forEach","mealProp","property","value","undefined","index","splice"],"mappings":"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","sourcesContent":["import fs from 'fs';\r\n\r\nconst p = './api/data/meals.json';\r\n\r\nconst getMealsFromFile = () => {\r\n  return new Promise(resolve => {\r\n    fs.readFile(p, (err, fileContent) => {\r\n      if (err) {\r\n        resolve([]);\r\n      } else {\r\n        resolve(JSON.parse(fileContent));\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\nclass Meal {\r\n  constructor(id, name, price, imageUrl, catererId = 1) {\r\n    this.id = id;\r\n    this.name = name;\r\n    this.price = price;\r\n    this.imageUrl = imageUrl;\r\n    this.catererId = catererId;\r\n  }\r\n\r\n  async add() {\r\n    try {\r\n      const meals = await getMealsFromFile();\r\n      this.id = Number(meals.length + 1);\r\n      meals.push(this);\r\n      fs.writeFile(p, JSON.stringify(meals), err => {\r\n        if (err) console.log(err);\r\n      });\r\n    } catch (err) {\r\n      throw new Error(err.message);\r\n    }\r\n  }\r\n\r\n  async update() {\r\n    try {\r\n      const meals = await getMealsFromFile();\r\n      this.id = Number(this.id);\r\n      const existingMealIndex = meals.findIndex(meal => meal.id === this.id);\r\n      const updatedMeals = [...meals];\r\n      const mealArray = Object.entries(this);\r\n      mealArray.forEach(mealProp => {\r\n        const [property, value] = mealProp;\r\n        if (value !== undefined) {\r\n          updatedMeals[existingMealIndex][property] = value;\r\n        }\r\n      });\r\n      fs.writeFile(p, JSON.stringify(updatedMeals), err => {\r\n        if (err) console.log(err);\r\n      });\r\n    } catch (err) {\r\n      throw new Error(err.message);\r\n    }\r\n  }\r\n\r\n  static async fetchAll() {\r\n    try {\r\n      const meals = await getMealsFromFile();\r\n      return meals;\r\n    } catch (err) {\r\n      throw new Error(err.message);\r\n    }\r\n  }\r\n\r\n  static async fetch(id) {\r\n    try {\r\n      const meals = await getMealsFromFile();\r\n      const index = meals.findIndex(meal => Number(meal.id) === Number(id));\r\n      return meals[index];\r\n    } catch (err) {\r\n      throw new Error(err.message);\r\n    }\r\n  }\r\n\r\n  static async deleteById(id) {\r\n    try {\r\n      const meals = await getMealsFromFile();\r\n      const existingMealIndex = meals.findIndex(meal => Number(meal.id) === Number(id));\r\n      meals.splice(existingMealIndex, 1);\r\n      fs.writeFile(p, JSON.stringify(meals), err => {\r\n        if (err) console.log(err);\r\n      });\r\n    } catch (err) {\r\n      throw new Error(err.message);\r\n    }\r\n  }\r\n}\r\n\r\nexport default Meal;\r\n"],"file":"meals.js"}