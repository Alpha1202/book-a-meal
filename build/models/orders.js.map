{"version":3,"sources":["../../api/models/orders.js"],"names":["p","getOrdersFromFile","Promise","resolve","fs","readFile","err","fileContent","JSON","parse","Order","id","customerId","order","total","delivery_status","mealId","quantity","mealOrderExists","orders","orderIndex","findIndex","Number","userOrder","length","forEach","mealOrder","mealIndex","updatedMealOrder","params","updateExistingMeal","addToExistingOrder","newOrder","addNewOrder","Error","message","index","orderId","action","updatedOrder","mealOrders","meal","price","modifyMealQuantity","deleteMealFromOrder","existingOrderIndex","splice","writeFile","stringify","console","log","Meal","fetch","push","newUpdatedOrder","deleteById"],"mappings":"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","sourcesContent":["import fs from 'fs';\r\nimport Meal from './meals';\r\n\r\nconst p = './api/data/orders.json';\r\n\r\nconst getOrdersFromFile = () => {\r\n  return new Promise(resolve => {\r\n    fs.readFile(p, (err, fileContent) => {\r\n      if (err) {\r\n        resolve([]);\r\n      } else {\r\n        resolve(JSON.parse(fileContent));\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\nclass Order {\r\n  constructor(id, customerId) {\r\n    this.id = id;\r\n    this.customerId = customerId;\r\n    this.order = [];\r\n    this.total = 0;\r\n    this.delivery_status = false;\r\n  }\r\n\r\n  async addOrder(mealId, quantity) {\r\n    try {\r\n      let mealOrderExists = false;\r\n      const orders = await getOrdersFromFile();\r\n      const orderIndex = orders.findIndex(\r\n        order => Number(order.customerId) === Number(this.customerId)\r\n      );\r\n      const userOrder = orders[orderIndex];\r\n      if (orders.length > 0) {\r\n        if (userOrder.order.length > 0) {\r\n          userOrder.order.forEach(async (mealOrder, mealIndex) => {\r\n            const updatedMealOrder = { ...mealOrder };\r\n            if (updatedMealOrder.id === mealId) {\r\n              mealOrderExists = true;\r\n              const params = {\r\n                orders,\r\n                updatedMealOrder,\r\n                mealOrder,\r\n                mealIndex,\r\n                orderIndex,\r\n                quantity,\r\n                userOrder\r\n              };\r\n              await Order.updateExistingMeal(params);\r\n            }\r\n          });\r\n          if (!mealOrderExists) {\r\n            const params = {\r\n              orders,\r\n              orderIndex,\r\n              quantity,\r\n              userOrder,\r\n              mealId\r\n            };\r\n            await Order.addToExistingOrder(params);\r\n          }\r\n        }\r\n      }\r\n      if (!userOrder) {\r\n        const params = { orders, userOrder, newOrder: this, mealId, quantity };\r\n        await Order.addNewOrder(params);\r\n      }\r\n    } catch (err) {\r\n      throw new Error(err.message);\r\n    }\r\n  }\r\n\r\n  static async fetch(id) {\r\n    try {\r\n      const orders = await getOrdersFromFile();\r\n      const index = orders.findIndex(order => Number(order.id) === Number(id));\r\n      return orders[index];\r\n    } catch (err) {\r\n      throw new Error(err.message);\r\n    }\r\n  }\r\n\r\n  static async fetchAll() {\r\n    try {\r\n      const orders = await getOrdersFromFile();\r\n      return orders;\r\n    } catch (err) {\r\n      throw new Error(err.message);\r\n    }\r\n  }\r\n\r\n  static async fetchUserOrders(customerId) {\r\n    try {\r\n      const orders = await getOrdersFromFile();\r\n      const index = orders.findIndex(order => Number(order.customerId) === Number(customerId));\r\n      return orders[index];\r\n    } catch (err) {\r\n      throw new Error(err.message);\r\n    }\r\n  }\r\n\r\n  static async modifyOrderMeals(orderId, mealId, action) {\r\n    try {\r\n      const orders = await getOrdersFromFile();\r\n      const index = orders.findIndex(order => Number(order.id) === Number(orderId));\r\n      const updatedOrder = { ...orders[index] };\r\n      const mealOrders = updatedOrder.order;\r\n      const mealIndex = mealOrders.findIndex(mealOrder => mealOrder.id === mealId);\r\n      const meal = mealOrders[mealIndex];\r\n      const params = { orders, index, updatedOrder, mealOrders };\r\n      if (action === 'increase') {\r\n        meal.quantity += 1;\r\n        meal.total += meal.price;\r\n        await Order.modifyMealQuantity(params);\r\n      } else if (action === 'decrease') {\r\n        if (meal.quantity === 1) {\r\n          params.orderId = orderId;\r\n          params.mealIndex = mealIndex;\r\n          await Order.deleteMealFromOrder(params);\r\n        } else {\r\n          meal.quantity -= 1;\r\n          meal.total -= meal.price;\r\n          await Order.modifyMealQuantity(params);\r\n        }\r\n      } else if (action === 'delete') {\r\n        params.orderId = orderId;\r\n        params.mealIndex = mealIndex;\r\n        await Order.deleteMealFromOrder(params);\r\n      }\r\n    } catch (err) {\r\n      throw new Error(err.message);\r\n    }\r\n  }\r\n\r\n  static async deleteById(id) {\r\n    try {\r\n      const orders = await getOrdersFromFile();\r\n      const existingOrderIndex = orders.findIndex(order => Number(order.id) === Number(id));\r\n      orders.splice(existingOrderIndex, 1);\r\n      fs.writeFile(p, JSON.stringify(orders), err => {\r\n        if (err) console.log(err);\r\n      });\r\n      return true;\r\n    } catch (err) {\r\n      throw new Error(err.message);\r\n    }\r\n  }\r\n\r\n  static async addNewOrder(params) {\r\n    try {\r\n      const { orders, mealId, quantity, newOrder } = params;\r\n      newOrder.id = Number(orders.length + 1);\r\n      const meal = await Meal.fetch(mealId);\r\n      meal.quantity = quantity;\r\n      meal.total = quantity * Number(meal.price);\r\n      newOrder.total = meal.total;\r\n      newOrder.order.push(meal);\r\n      orders.push(newOrder);\r\n      fs.writeFile(p, JSON.stringify(orders), err => {\r\n        if (err) console.log(err);\r\n      });\r\n      return true;\r\n    } catch (err) {\r\n      throw new Error(err.message);\r\n    }\r\n  }\r\n\r\n  static async addToExistingOrder(params) {\r\n    try {\r\n      const { orders, orderIndex, quantity, userOrder, mealId } = params;\r\n      const meal = await Meal.fetch(mealId);\r\n      meal.quantity = quantity;\r\n      meal.total = quantity * Number(meal.price);\r\n      userOrder.total += meal.total;\r\n      userOrder.order.push(meal);\r\n      orders[orderIndex] = userOrder;\r\n      fs.writeFile(p, JSON.stringify(orders), err => {\r\n        if (err) console.log(err);\r\n      });\r\n      return true;\r\n    } catch (err) {\r\n      throw new Error(err.message);\r\n    }\r\n  }\r\n\r\n  static async updateExistingMeal(params) {\r\n    try {\r\n      const {\r\n        orders,\r\n        updatedMealOrder,\r\n        mealOrder,\r\n        orderIndex,\r\n        userOrder,\r\n        quantity,\r\n        mealIndex\r\n      } = params;\r\n      updatedMealOrder.quantity += quantity;\r\n      updatedMealOrder.total = updatedMealOrder.quantity * updatedMealOrder.price;\r\n      userOrder.order[mealIndex] = updatedMealOrder;\r\n      userOrder.total -= mealOrder.total;\r\n      userOrder.total += updatedMealOrder.total;\r\n      orders[orderIndex] = userOrder;\r\n      fs.writeFile(p, JSON.stringify(orders), err => {\r\n        if (err) console.log(err);\r\n      });\r\n      return true;\r\n    } catch (err) {\r\n      throw new Error(err.message);\r\n    }\r\n  }\r\n\r\n  static async deleteMealFromOrder(params) {\r\n    try {\r\n      const { orderId, orders, index, updatedOrder, mealOrders, mealIndex } = params;\r\n      const newUpdatedOrder = { ...updatedOrder };\r\n      newUpdatedOrder.total -= mealOrders[mealIndex].total;\r\n      mealOrders.splice(mealIndex, 1);\r\n      newUpdatedOrder.order = mealOrders;\r\n      if (mealOrders.length !== 0) {\r\n        orders[index] = newUpdatedOrder;\r\n        fs.writeFile(p, JSON.stringify(orders), err => {\r\n          if (err) console.log(err);\r\n        });\r\n      } else {\r\n        await Order.deleteById(orderId);\r\n      }\r\n      return true;\r\n    } catch (err) {\r\n      throw new Error(err.message);\r\n    }\r\n  }\r\n\r\n  static async modifyMealQuantity(params) {\r\n    try {\r\n      const { orders, index, updatedOrder, mealOrders } = params;\r\n      updatedOrder.total = 0;\r\n      mealOrders.forEach(mealOrder => {\r\n        updatedOrder.total += mealOrder.total;\r\n      });\r\n      orders[index] = updatedOrder;\r\n      fs.writeFile(p, JSON.stringify(orders), err => {\r\n        if (err) console.log(err);\r\n      });\r\n    } catch (err) {\r\n      throw new Error(err.message);\r\n    }\r\n  }\r\n}\r\n\r\nexport default Order;\r\n"],"file":"orders.js"}