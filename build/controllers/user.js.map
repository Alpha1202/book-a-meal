{"version":3,"sources":["../../api/controllers/user.js"],"names":["secret","process","env","JWT_SECRET","UserController","req","res","body","name","email","phone","password","bcrypt","hash","User","create","user","safeUser","id","jwtToken","jwt","sign","expiresIn","status","json","message","token","findOne","where","Error","compare","result"],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt';\r\nimport { config } from 'dotenv';\r\nimport User from '../models/user';\r\n\r\nconfig();\r\n\r\nconst secret = process.env.JWT_SECRET;\r\n\r\nclass UserController {\r\n  static async registerUser(req, res) {\r\n    try {\r\n      const { name, email, phone, password } = req.body;\r\n      const hash = await bcrypt.hash(password, 10);\r\n      const user = await User.create({ name, email, phone, password: hash });\r\n      const safeUser = {\r\n        id: user.id,\r\n        name: user.name,\r\n        email: user.email,\r\n        phone: user.phone\r\n      };\r\n      const jwtToken = jwt.sign({ user: safeUser }, secret, {\r\n        expiresIn: 86400\r\n      });\r\n      return res.status(201).json({\r\n        status: 'success',\r\n        message: 'User Registered',\r\n        token: `Bearer ${jwtToken}`,\r\n        user: safeUser\r\n      });\r\n    } catch (err) {\r\n      return res.status(500).json({\r\n        status: 'error',\r\n        message: err.message\r\n      });\r\n    }\r\n  }\r\n\r\n  static async loginUser(req, res) {\r\n    try {\r\n      const { email, password } = req.body;\r\n      const user = await User.findOne({ where: { email } });\r\n      if (!user) {\r\n        throw new Error('User with that email does not exist');\r\n      }\r\n      const result = await bcrypt.compare(password, user.password);\r\n      if (!result) {\r\n        throw new Error(\"Password doesn't match our records\");\r\n      }\r\n      const safeUser = {\r\n        id: user.id,\r\n        name: user.name,\r\n        email: user.email,\r\n        phone: user.phone\r\n      };\r\n      const jwtToken = jwt.sign({ user: safeUser }, secret, {\r\n        expiresIn: 86400\r\n      });\r\n      return res.status(200).json({\r\n        status: 'success',\r\n        message: 'User Logged In',\r\n        token: `Bearer ${jwtToken}`,\r\n        user: safeUser\r\n      });\r\n    } catch (err) {\r\n      return res.status(500).json({\r\n        status: 'error',\r\n        message: err.message\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default UserController;\r\n"],"file":"user.js"}