{"version":3,"sources":["../../api/controllers/menu.js"],"names":["MenuController","date","Date","month","getMonth","today","getFullYear","padStart","getDate","req","res","generateDate","Menu","findAll","where","createdAt","menus","status","json","message","data","findOne","catererId","caterer","id","menu","body","mealId","quantity","Meal","meal","Error","dataValues","updatedAt","safeMeal","Number","length","menuMeals","push","create","meals","JSON","stringify","update","updateMeals","mealIndex","findIndex","menuMeal","updatedMenuMeals","parse"],"mappings":"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","sourcesContent":["import Menu from '../models/menu';\r\nimport Meal from '../models/meals';\r\n\r\nclass MenuController {\r\n  static generateDate() {\r\n    const date = new Date();\r\n    const month = `${date.getMonth() + 1}`;\r\n    const today = `${date.getFullYear()}-${month.padStart(2, '0')}-${date.getDate()}`;\r\n    return today;\r\n  }\r\n\r\n  static async getMenus(req, res) {\r\n    const today = MenuController.generateDate();\r\n    const menus = await Menu.findAll({ where: { createdAt: today } });\r\n    return res.status(200).json({\r\n      status: 'success',\r\n      message: 'Menus Retrieved',\r\n      data: menus\r\n    });\r\n  }\r\n\r\n  static async getSingleMenu(req, res) {\r\n    const today = MenuController.generateDate();\r\n    const menu = await Menu.findOne({ where: { createdAt: today, catererId: req.caterer.id } });\r\n    return res.status(200).json({\r\n      status: 'success',\r\n      message: 'Caterer Menu Retrieved',\r\n      data: menu\r\n    });\r\n  }\r\n\r\n  static async addMealToMenu(req, res) {\r\n    try {\r\n      const { mealId, quantity } = req.body;\r\n      const meal = await Meal.findOne({ where: { id: mealId, catererId: req.caterer.id } });\r\n      if (!meal) {\r\n        throw new Error(`Meal with that ID Doesn't exist`);\r\n      }\r\n      const { createdAt, updatedAt, ...safeMeal } = meal.dataValues;\r\n      safeMeal.quantity = Number(quantity);\r\n      const today = MenuController.generateDate();\r\n      const menu = await Menu.findAll({ where: { catererId: req.caterer.id, createdAt: today } });\r\n      let menuMeals;\r\n      if (menu.length === 0) {\r\n        menuMeals = [];\r\n        menuMeals.push(safeMeal);\r\n        await Menu.create({\r\n          meals: JSON.stringify(menuMeals),\r\n          catererId: req.caterer.id\r\n        });\r\n        await Meal.update({ quantity }, { where: { id: mealId } });\r\n      } else {\r\n        menuMeals = await MenuController.updateMeals(menu[0], safeMeal, mealId, quantity);\r\n        await Menu.update(\r\n          { meals: JSON.stringify(menuMeals) },\r\n          { where: { catererId: req.caterer.id, createdAt: today } }\r\n        );\r\n        const mealIndex = menuMeals.findIndex(menuMeal => menuMeal.id === Number(mealId));\r\n        await Meal.update({ quantity: menuMeals[mealIndex].quantity }, { where: { id: mealId } });\r\n      }\r\n      return res.status(200).json({\r\n        status: 'success',\r\n        message: 'Meal Added to Menu',\r\n        data: menuMeals\r\n      });\r\n    } catch (err) {\r\n      return res.status(500).json({\r\n        status: 'error',\r\n        message: err.message\r\n      });\r\n    }\r\n  }\r\n\r\n  static async updateMeals(menu, safeMeal, mealId, quantity) {\r\n    const { meals } = menu.dataValues;\r\n    const updatedMenuMeals = JSON.parse(meals);\r\n    const mealIndex = updatedMenuMeals.findIndex(menuMeal => menuMeal.id === Number(mealId));\r\n    if (mealIndex < 0) {\r\n      updatedMenuMeals.push(safeMeal);\r\n    } else {\r\n      updatedMenuMeals[mealIndex].quantity += Number(quantity);\r\n    }\r\n    return updatedMenuMeals;\r\n  }\r\n}\r\n\r\nexport default MenuController;\r\n"],"file":"menu.js"}