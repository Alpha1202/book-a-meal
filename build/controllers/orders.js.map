{"version":3,"sources":["../../api/controllers/orders.js"],"names":["OrderController","req","res","body","mealId","quantity","OrderItem","findOne","where","userId","user","id","orderItem","response","status","message","create","newOrderItem","data","json","Order","findAll","catererId","caterer","orders","include","Meal","orderItems","Error","meals","total","forEach","orderMeal","meal","push","price","order","orderId","params","action","name","update","destroy","caterers","Set","add","reduceQuantity","createOrders","billingAddress","then","dbMeal","Menu","menu","menuMeals","JSON","parse","updatedMenuMeals","map","menuMeal","updatedMenuMeal","stringify","shift","length","catererTotal","catererMeals","filter","catererMeal","billing_address","delivery_status"],"mappings":"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","sourcesContent":["import Order from '../models/orders';\r\nimport OrderItem from '../models/orderItem';\r\nimport Meal from '../models/meals';\r\nimport Menu from '../models/menu';\r\n\r\nclass OrderController {\r\n  static async addToOrders(req, res) {\r\n    try {\r\n      const { mealId, quantity } = req.body;\r\n      const orderItem = await OrderItem.findOne({ where: { mealId, userId: req.user.id } });\r\n      const response = {};\r\n      if (orderItem) {\r\n        response.body = {\r\n          status: 'warning',\r\n          message: 'Order Already exists'\r\n        };\r\n      } else {\r\n        const newOrderItem = await OrderItem.create({ mealId, quantity, userId: req.user.id });\r\n        response.body = {\r\n          status: 'success',\r\n          message: 'Added to Orders',\r\n          data: newOrderItem\r\n        };\r\n      }\r\n      return res.status(200).json(response.body);\r\n    } catch (err) {\r\n      return res.status(500).json({\r\n        status: 'error',\r\n        message: err.message\r\n      });\r\n    }\r\n  }\r\n\r\n  static async getOrders(req, res) {\r\n    try {\r\n      const orders = await Order.findAll({ where: { catererId: req.caterer.id } });\r\n      return res.status(200).json({\r\n        status: 'success',\r\n        message: 'Orders Retrieved',\r\n        data: orders\r\n      });\r\n    } catch (err) {\r\n      return res.status(500).json({\r\n        status: 'error',\r\n        message: err.message\r\n      });\r\n    }\r\n  }\r\n\r\n  static async getOrderItems(req, res) {\r\n    try {\r\n      const orderItems = await OrderItem.findAll({\r\n        where: { userId: req.user.id },\r\n        include: [Meal]\r\n      });\r\n      if (!orderItems) {\r\n        throw new Error('User Has No Order Items');\r\n      }\r\n      const meals = [];\r\n      let total = 0;\r\n      orderItems.forEach(orderItem => {\r\n        const orderMeal = { ...orderItem };\r\n        orderMeal.meal.quantity = orderItem.quantity;\r\n        meals.push(orderMeal.meal);\r\n        total += orderItem.quantity * orderMeal.meal.price;\r\n      });\r\n      const order = { meals, total };\r\n      return res.status(200).json({\r\n        status: 'success',\r\n        message: 'Orders Retrieved',\r\n        data: order\r\n      });\r\n    } catch (err) {\r\n      return res.status(500).json({\r\n        status: 'error',\r\n        message: err.message\r\n      });\r\n    }\r\n  }\r\n\r\n  static async modifyOrder(req, res) {\r\n    try {\r\n      const { orderId } = req.params;\r\n      const { action } = req.body;\r\n      const orderItem = await OrderItem.findOne({\r\n        where: { id: orderId, userId: req.user.id },\r\n        include: [Meal]\r\n      });\r\n      if (action === 'increase') {\r\n        orderItem.quantity += 1;\r\n        if (orderItem.quantity > orderItem.meal.quantity) {\r\n          throw new Error(\r\n            `Only ${orderItem.meal.quantity} servings of ${orderItem.meal.name} is available`\r\n          );\r\n        }\r\n        await OrderItem.update({ quantity: orderItem.quantity }, { where: { id: orderItem.id } });\r\n      } else if (action === 'decrease') {\r\n        orderItem.quantity -= 1;\r\n        if (orderItem.quantity === 0) {\r\n          await OrderItem.destroy({ where: { id: orderItem.id } });\r\n        } else {\r\n          await OrderItem.update({ quantity: orderItem.quantity }, { where: { id: orderItem.id } });\r\n        }\r\n      } else if (action === 'delete') {\r\n        await OrderItem.destroy({ where: { id: orderItem.id } });\r\n      }\r\n      return res.status(200).json({\r\n        status: 'success',\r\n        message: 'Order Updated'\r\n      });\r\n    } catch (err) {\r\n      return res.status(500).json({\r\n        status: 'error',\r\n        message: err.message\r\n      });\r\n    }\r\n  }\r\n\r\n  static async checkoutOrders(req, res) {\r\n    try {\r\n      const orderItems = await OrderItem.findAll({\r\n        where: { userId: req.user.id },\r\n        include: [Meal]\r\n      });\r\n      const meals = [];\r\n      const caterers = new Set();\r\n      orderItems.forEach(orderItem => {\r\n        const orderMeal = { ...orderItem };\r\n        orderMeal.meal.quantity = orderItem.quantity;\r\n        meals.push(orderMeal.meal);\r\n        caterers.add(orderMeal.meal.catererId);\r\n      });\r\n      await OrderController.reduceQuantity(meals);\r\n      await OrderItem.destroy({ where: { userId: req.user.id } });\r\n      await OrderController.createOrders(caterers, meals, req.body.billingAddress, req.user.id);\r\n      return res.status(201).json({\r\n        status: 'success',\r\n        message: 'Order Made'\r\n      });\r\n    } catch (err) {\r\n      return res.status(500).json({\r\n        status: 'error',\r\n        message: err.message\r\n      });\r\n    }\r\n  }\r\n\r\n  static async reduceQuantity(meals) {\r\n    try {\r\n      const meal = meals[0];\r\n      Meal.findOne({ where: { id: meal.id } })\r\n        .then(dbMeal => {\r\n          return dbMeal.update(\r\n            { quantity: dbMeal.quantity - meal.quantity },\r\n            { where: { id: meal.id } }\r\n          );\r\n        })\r\n        .then(() => {\r\n          return Menu.findOne({ where: { catererId: meal.catererId } });\r\n        })\r\n        .then(menu => {\r\n          const menuMeals = JSON.parse(menu.meals);\r\n          const updatedMenuMeals = menuMeals.map(menuMeal => {\r\n            const updatedMenuMeal = { ...menuMeal };\r\n            if (menuMeal.id === meal.id) {\r\n              updatedMenuMeal.quantity -= meal.quantity;\r\n            }\r\n            return updatedMenuMeal;\r\n          });\r\n          return menu.update(\r\n            { meals: JSON.stringify(updatedMenuMeals) },\r\n            { where: { id: menu.id } }\r\n          );\r\n        })\r\n        .then(() => {\r\n          meals.shift();\r\n          return meals.length !== 0 ? OrderController.reduceQuantity(meals) : true;\r\n        });\r\n    } catch (err) {\r\n      throw new Error(err.message);\r\n    }\r\n  }\r\n\r\n  static async createOrders(caterers, meals, billingAddress, userId) {\r\n    try {\r\n      caterers.forEach(async caterer => {\r\n        let catererTotal = 0;\r\n        const catererMeals = meals.filter(meal => meal.catererId === caterer);\r\n        catererMeals.forEach(catererMeal => {\r\n          catererTotal += catererMeal.quantity * catererMeal.price;\r\n        });\r\n        await Order.create({\r\n          order: JSON.stringify(catererMeals),\r\n          total: catererTotal,\r\n          billing_address: billingAddress,\r\n          catererId: caterer,\r\n          userId,\r\n          delivery_status: 0\r\n        });\r\n      });\r\n    } catch (err) {\r\n      throw new Error(err.message);\r\n    }\r\n  }\r\n}\r\n\r\nexport default OrderController;\r\n"],"file":"orders.js"}