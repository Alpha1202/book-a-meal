{"version":3,"sources":["../../api/controllers/auth.js"],"names":["secret","process","env","JWT_SECRET","AuthController","req","res","next","token","headers","authorization","status","json","message","jwtToken","split","jwt","verify","decoded","user","isCaterer","Error","caterer"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;;;AAEA;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,UAA3B;;IAEMC,c;;;;;;;;;kCACiBC,G,EAAKC,G,EAAKC,I,EAAM;AACnC,UAAMC,KAAK,GAAGH,GAAG,CAACI,OAAJ,CAAYC,aAA1B;;AACA,UAAI,CAACF,KAAL,EAAY;AACV,eAAOF,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,UAAAA,MAAM,EAAE,OADkB;AAE1BE,UAAAA,OAAO,EAAE;AAFiB,SAArB,CAAP;AAID;;AACD,UAAMC,QAAQ,GAAGN,KAAK,CAACO,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAjB;AACAV,MAAAA,GAAG,CAACW,GAAJ,GAAUF,QAAV;AACAP,MAAAA,IAAI;AACJ,aAAO,IAAP;AACD;;;;;;+CAE4BF,G,EAAKC,G,EAAKC,I;;;;;;;;uBAEbS,sBAAIC,MAAJ,CAAWZ,GAAG,CAACW,GAAf,EAAoBhB,MAApB,C;;;AAAhBkB,gBAAAA,O;AACNb,gBAAAA,GAAG,CAACc,IAAJ,GAAWD,OAAO,CAACC,IAAnB;AACAZ,gBAAAA,IAAI;iDACG,I;;;;;iDAEAD,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAAA,MAAM,EAAE,OADkB;AAE1BE,kBAAAA,OAAO,EAAE;AAFiB,iBAArB,C;;;;;;;;;;;;;;;;;;;;;gDAOmBR,G,EAAKC,G,EAAKC,I;;;;;;;;uBAEdS,sBAAIC,MAAJ,CAAWZ,GAAG,CAACW,GAAf,EAAoBhB,MAApB,C;;;AAAhBkB,gBAAAA,O;;oBACDA,OAAO,CAACE,S;;;;;sBACL,IAAIC,KAAJ,CAAU,cAAV,C;;;AAERhB,gBAAAA,GAAG,CAACiB,OAAJ,GAAcJ,OAAO,CAACI,OAAtB;AACAf,gBAAAA,IAAI;kDACG,I;;;;;kDAEAD,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAAA,MAAM,EAAE,OADkB;AAE1BE,kBAAAA,OAAO,EAAE;AAFiB,iBAArB,C;;;;;;;;;;;;;;;;;;;;;eAQET,c","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport { config } from 'dotenv';\r\n\r\nconfig();\r\n\r\nconst secret = process.env.JWT_SECRET;\r\n\r\nclass AuthController {\r\n  static checkForToken(req, res, next) {\r\n    const token = req.headers.authorization;\r\n    if (!token) {\r\n      return res.status(401).json({\r\n        status: 'error',\r\n        message: 'No Token Provided'\r\n      });\r\n    }\r\n    const jwtToken = token.split(' ')[1];\r\n    req.jwt = jwtToken;\r\n    next();\r\n    return true;\r\n  }\r\n\r\n  static async verifyUserToken(req, res, next) {\r\n    try {\r\n      const decoded = await jwt.verify(req.jwt, secret);\r\n      req.user = decoded.user;\r\n      next();\r\n      return true;\r\n    } catch (err) {\r\n      return res.status(401).json({\r\n        status: 'error',\r\n        message: 'Invalid Auth Token'\r\n      });\r\n    }\r\n  }\r\n\r\n  static async verifyAdminToken(req, res, next) {\r\n    try {\r\n      const decoded = await jwt.verify(req.jwt, secret);\r\n      if (!decoded.isCaterer) {\r\n        throw new Error('Unauthorized');\r\n      }\r\n      req.caterer = decoded.caterer;\r\n      next();\r\n      return true;\r\n    } catch (err) {\r\n      return res.status(401).json({\r\n        status: 'error',\r\n        message: 'Unauthorized'\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default AuthController;\r\n"],"file":"auth.js"}