{"version":3,"sources":["../../api/controllers/caterer.js"],"names":["secret","process","env","JWT_SECRET","CatererController","req","res","body","name","email","phone","password","cateringService","catering_service","bcrypt","hash","Caterer","create","caterer","safeCaterer","id","jwtToken","jwt","sign","isCaterer","expiresIn","status","json","message","token","findOne","where","Error","compare","result","user"],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt';\r\nimport { config } from 'dotenv';\r\nimport Caterer from '../models/caterer';\r\n\r\nconfig();\r\n\r\nconst secret = process.env.JWT_SECRET;\r\n\r\nclass CatererController {\r\n  static async registerCaterer(req, res) {\r\n    try {\r\n      const { name, email, phone, password } = req.body;\r\n      const cateringService = req.body.catering_service;\r\n      const hash = await bcrypt.hash(password, 10);\r\n      const caterer = await Caterer.create({\r\n        name,\r\n        email,\r\n        phone,\r\n        catering_service: cateringService,\r\n        password: hash\r\n      });\r\n      const safeCaterer = {\r\n        id: caterer.id,\r\n        name: caterer.name,\r\n        email: caterer.email,\r\n        phone: caterer.phone\r\n      };\r\n      const jwtToken = jwt.sign({ caterer: safeCaterer, isCaterer: true }, secret, {\r\n        expiresIn: 86400\r\n      });\r\n      return res.status(201).json({\r\n        status: 'success',\r\n        message: 'Caterer Registered',\r\n        token: `Bearer ${jwtToken}`,\r\n        caterer: safeCaterer\r\n      });\r\n    } catch (err) {\r\n      return res.status(500).json({\r\n        status: 'error',\r\n        message: err.message\r\n      });\r\n    }\r\n  }\r\n\r\n  static async loginCaterer(req, res) {\r\n    try {\r\n      const { email, password } = req.body;\r\n      const caterer = await Caterer.findOne({ where: { email } });\r\n      if (!caterer) {\r\n        throw new Error('Caterer with that email does not exist');\r\n      }\r\n      const result = await bcrypt.compare(password, caterer.password);\r\n      if (!result) {\r\n        throw new Error(\"Password doesn't match our records\");\r\n      }\r\n      const safeCaterer = {\r\n        id: caterer.id,\r\n        name: caterer.name,\r\n        email: caterer.email,\r\n        phone: caterer.phone\r\n      };\r\n      const jwtToken = jwt.sign({ caterer: safeCaterer, isCaterer: true }, secret, {\r\n        expiresIn: 86400\r\n      });\r\n      return res.status(200).json({\r\n        status: 'success',\r\n        message: 'Caterer Logged In',\r\n        token: `Bearer ${jwtToken}`,\r\n        user: safeCaterer\r\n      });\r\n    } catch (err) {\r\n      return res.status(500).json({\r\n        status: 'error',\r\n        message: err.message\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default CatererController;\r\n"],"file":"caterer.js"}