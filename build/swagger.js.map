{"version":3,"sources":["../api/swagger.js"],"names":["openapi","info","version","title","description","license","name","url","contact","email","tags","schemes","consumes","produces","paths","post","requestBody","content","schema","properties","type","phone","password","responses","catering_service","get","summary","security","JWT","price","parameters","in","required","delete","put","mealId","quantity","action","billingAddress","components","securitySchemes"],"mappings":"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","sourcesContent":["export default {\r\n  openapi: '3.0.0',\r\n  info: {\r\n    version: '1.0.0',\r\n    title: 'Book A Meal',\r\n    description: 'Meal Booking Application',\r\n    license: {\r\n      name: 'MIT',\r\n      url: 'https://opensource.org/licenses/MIT'\r\n    },\r\n    contact: {\r\n      email: 'timilehin.olumofin@gmail.com'\r\n    }\r\n  },\r\n  tags: [\r\n    {\r\n      name: 'Users',\r\n      description: 'API Endpoints for users in the system'\r\n    },\r\n    {\r\n      name: 'Caterers',\r\n      description: 'API Endpoints for Caterers in the system'\r\n    },\r\n    {\r\n      name: 'Meals',\r\n      description: 'API Endpoints for Caterer Meals in the system'\r\n    },\r\n    {\r\n      name: 'Menus',\r\n      description: 'API Endpoints for Caterers Menus in the system'\r\n    },\r\n    {\r\n      name: 'Orders',\r\n      description: 'API Endpoints for Users Orders in the system'\r\n    }\r\n  ],\r\n  schemes: ['http'],\r\n  consumes: ['application/json', 'application/x-www-form-urlencoded'],\r\n  produces: ['application/json'],\r\n  paths: {\r\n    '/api/v1/auth/signup': {\r\n      post: {\r\n        tags: ['Users'],\r\n        description: 'Register a New User in the system',\r\n        requestBody: {\r\n          description: 'Input Data Format',\r\n          content: {\r\n            'application/json': {\r\n              schema: {\r\n                properties: {\r\n                  name: {\r\n                    type: 'string',\r\n                    description: 'Name of User'\r\n                  },\r\n                  email: {\r\n                    type: 'string',\r\n                    description: 'Email of User'\r\n                  },\r\n                  phone: {\r\n                    type: 'string',\r\n                    description: 'Phone Number of User'\r\n                  },\r\n                  password: {\r\n                    type: 'string',\r\n                    description: 'Password of User'\r\n                  }\r\n                },\r\n                type: 'object'\r\n              }\r\n            }\r\n          }\r\n        },\r\n        produces: ['application/json'],\r\n        responses: {\r\n          '400': {\r\n            description: 'User Registration Validation Error'\r\n          },\r\n          '500': {\r\n            description: 'User Already Registred'\r\n          },\r\n          '201': {\r\n            description: 'New user is registered'\r\n          }\r\n        }\r\n      }\r\n    },\r\n    '/api/v1/auth/login': {\r\n      post: {\r\n        tags: ['Users'],\r\n        description: 'Log In a Registered User',\r\n        requestBody: {\r\n          description: 'Input Data Format',\r\n          content: {\r\n            'application/json': {\r\n              schema: {\r\n                properties: {\r\n                  email: {\r\n                    type: 'string',\r\n                    description: 'Email of Registered User'\r\n                  },\r\n                  password: {\r\n                    type: 'string',\r\n                    description: 'Password of Registered User'\r\n                  }\r\n                },\r\n                type: 'object'\r\n              }\r\n            }\r\n          }\r\n        },\r\n        produces: ['application/json'],\r\n        responses: {\r\n          '400': {\r\n            description: 'User Login Validation Error'\r\n          },\r\n          '500': {\r\n            description: 'User Does Not Exist'\r\n          },\r\n          '200': {\r\n            description: 'User Logged In'\r\n          }\r\n        }\r\n      }\r\n    },\r\n    '/api/v1/auth/caterer/signup': {\r\n      post: {\r\n        tags: ['Caterers'],\r\n        description: 'Register a New Caterer in the system',\r\n        requestBody: {\r\n          description: 'Input Data Format',\r\n          content: {\r\n            'application/json': {\r\n              schema: {\r\n                properties: {\r\n                  name: {\r\n                    type: 'string',\r\n                    description: 'Name of Caterer'\r\n                  },\r\n                  email: {\r\n                    type: 'string',\r\n                    description: 'Email of Caterer'\r\n                  },\r\n                  phone: {\r\n                    type: 'string',\r\n                    description: 'Phone Number of Caterer'\r\n                  },\r\n                  catering_service: {\r\n                    type: 'string',\r\n                    description: 'Name of Catering service'\r\n                  },\r\n                  password: {\r\n                    type: 'string',\r\n                    description: 'Password of Caterer'\r\n                  }\r\n                },\r\n                type: 'object'\r\n              }\r\n            }\r\n          }\r\n        },\r\n        produces: ['application/json'],\r\n        responses: {\r\n          '400': {\r\n            description: 'Caterer Registration Validation Error'\r\n          },\r\n          '500': {\r\n            description: 'Caterer Already Registred'\r\n          },\r\n          '201': {\r\n            description: 'New Caterer is registered'\r\n          }\r\n        }\r\n      }\r\n    },\r\n    '/api/v1/auth/caterer/login': {\r\n      post: {\r\n        tags: ['Caterers'],\r\n        description: 'Log In a Registered Caterer',\r\n        requestBody: {\r\n          description: 'Input Data Format',\r\n          content: {\r\n            'application/json': {\r\n              schema: {\r\n                properties: {\r\n                  email: {\r\n                    type: 'string',\r\n                    description: 'Email of Registered Caterer'\r\n                  },\r\n                  password: {\r\n                    type: 'string',\r\n                    description: 'Password of Registered Caterer'\r\n                  }\r\n                },\r\n                type: 'object'\r\n              }\r\n            }\r\n          }\r\n        },\r\n        produces: ['application/json'],\r\n        responses: {\r\n          '400': {\r\n            description: 'Caterer Login Validation Error'\r\n          },\r\n          '500': {\r\n            description: 'Caterer Does Not Exist'\r\n          },\r\n          '200': {\r\n            description: 'Caterer Logged In'\r\n          }\r\n        }\r\n      }\r\n    },\r\n    '/api/v1/meals/': {\r\n      get: {\r\n        summary: 'Get all meals for logged in caterer',\r\n        tags: ['Meals'],\r\n        produces: ['application/json'],\r\n        responses: {\r\n          '401': {\r\n            description: 'Only Authenticated Caterers are Authorized'\r\n          },\r\n          '200': {\r\n            description: \"Logged In Caterer's Meals\"\r\n          }\r\n        },\r\n        security: [\r\n          {\r\n            JWT: []\r\n          }\r\n        ]\r\n      },\r\n      post: {\r\n        summary: 'Add New Meal to the system',\r\n        tags: ['Meals'],\r\n        requestBody: {\r\n          description: 'Input Data Format',\r\n          content: {\r\n            'application/json': {\r\n              schema: {\r\n                properties: {\r\n                  name: {\r\n                    type: 'string',\r\n                    description: 'Name of new Meal'\r\n                  },\r\n                  price: {\r\n                    type: 'string',\r\n                    description: 'Price of new Meal'\r\n                  }\r\n                },\r\n                type: 'object'\r\n              }\r\n            }\r\n          }\r\n        },\r\n        produces: ['application/json'],\r\n        responses: {\r\n          '401': {\r\n            description: 'Only Authenticated Caterers are Authorized'\r\n          },\r\n          '400': {\r\n            description: 'Validation Error'\r\n          },\r\n          '200': {\r\n            description: 'New Meal Created'\r\n          }\r\n        },\r\n        security: [\r\n          {\r\n            JWT: []\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    '/api/v1/meals/{id}': {\r\n      parameters: [\r\n        {\r\n          name: 'id',\r\n          in: 'path',\r\n          required: true,\r\n          description: 'ID of meal that we want to work with',\r\n          type: 'string'\r\n        }\r\n      ],\r\n      delete: {\r\n        summary: 'Delete Meal with given ID',\r\n        tags: ['Meals'],\r\n        produces: ['application/json'],\r\n        responses: {\r\n          '401': {\r\n            description: 'Only Authenticated Caterers are Authorized'\r\n          },\r\n          '200': {\r\n            description: 'Meal Deleted'\r\n          }\r\n        },\r\n        security: [\r\n          {\r\n            JWT: []\r\n          }\r\n        ]\r\n      },\r\n      put: {\r\n        summary: 'Modify Meal with given ID',\r\n        tags: ['Meals'],\r\n        requestBody: {\r\n          description: 'Input Data Format',\r\n          content: {\r\n            'application/json': {\r\n              schema: {\r\n                properties: {\r\n                  name: {\r\n                    type: 'string',\r\n                    description: 'New name of Meal'\r\n                  },\r\n                  price: {\r\n                    type: 'string',\r\n                    description: 'New price of Meal'\r\n                  }\r\n                },\r\n                type: 'object'\r\n              }\r\n            }\r\n          }\r\n        },\r\n        produces: ['application/json'],\r\n        responses: {\r\n          '401': {\r\n            description: 'Only Authenticated Caterers are Authorized'\r\n          },\r\n          '400': {\r\n            description: 'Validation Error'\r\n          },\r\n          '500': {\r\n            description: 'Meal with given ID does nor exist'\r\n          },\r\n          '200': {\r\n            description: 'Meal Updated'\r\n          }\r\n        },\r\n        security: [\r\n          {\r\n            JWT: []\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    '/api/v1/menu/': {\r\n      get: {\r\n        summary: 'Get all menus from all caterers',\r\n        tags: ['Menus'],\r\n        produces: ['application/json'],\r\n        responses: {\r\n          '401': {\r\n            description: 'Only Authenticated Users are Authorized'\r\n          },\r\n          '200': {\r\n            description: 'All Menus Retrieved'\r\n          }\r\n        },\r\n        security: [\r\n          {\r\n            JWT: []\r\n          }\r\n        ]\r\n      },\r\n      post: {\r\n        summary: 'Add New Meal to Menu in the system',\r\n        tags: ['Menus'],\r\n        requestBody: {\r\n          description: 'Input Data Format',\r\n          content: {\r\n            'application/json': {\r\n              schema: {\r\n                properties: {\r\n                  mealId: {\r\n                    type: 'string',\r\n                    description: 'ID of Meal to be Added'\r\n                  },\r\n                  quantity: {\r\n                    type: 'string',\r\n                    description: 'Quantity of Meal in Menu'\r\n                  }\r\n                },\r\n                type: 'object'\r\n              }\r\n            }\r\n          }\r\n        },\r\n        produces: ['application/json'],\r\n        responses: {\r\n          '401': {\r\n            description: 'Only Authenticated Caterers are Authorized'\r\n          },\r\n          '400': {\r\n            description: 'Validation Error'\r\n          },\r\n          '200': {\r\n            description: 'Meal Added to Menu'\r\n          }\r\n        },\r\n        security: [\r\n          {\r\n            JWT: []\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    '/api/v1/menu/caterer': {\r\n      get: {\r\n        summary: 'Get Menu for Logged In Caterer',\r\n        tags: ['Menus'],\r\n        produces: ['application/json'],\r\n        responses: {\r\n          '401': {\r\n            description: 'Only Authenticated Caterers are Authorized'\r\n          },\r\n          '200': {\r\n            description: \"Caterer's Menu Retrieved\"\r\n          }\r\n        },\r\n        security: [\r\n          {\r\n            JWT: []\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    '/api/v1/orders': {\r\n      get: {\r\n        summary: 'Get all orders to Logged In Caterer',\r\n        tags: ['Orders'],\r\n        produces: ['application/json'],\r\n        responses: {\r\n          '401': {\r\n            description: 'Only Authenticated Caterers are Authorized'\r\n          },\r\n          '200': {\r\n            description: 'All Orders Retrieved'\r\n          }\r\n        },\r\n        security: [\r\n          {\r\n            JWT: []\r\n          }\r\n        ]\r\n      },\r\n      post: {\r\n        summary: 'Add Meal to OrderItems of Logged In User in the system',\r\n        tags: ['Orders'],\r\n        requestBody: {\r\n          description: 'Input Data Format',\r\n          content: {\r\n            'application/json': {\r\n              schema: {\r\n                properties: {\r\n                  mealId: {\r\n                    type: 'string',\r\n                    description: 'ID of Meal to be Added'\r\n                  },\r\n                  quantity: {\r\n                    type: 'string',\r\n                    description: 'Quantity of Meal to order'\r\n                  }\r\n                },\r\n                type: 'object'\r\n              }\r\n            }\r\n          }\r\n        },\r\n        produces: ['application/json'],\r\n        responses: {\r\n          '401': {\r\n            description: 'Only Authenticated Users are Authorized'\r\n          },\r\n          '400': {\r\n            description: 'Validation Error'\r\n          },\r\n          '200': {\r\n            description: 'Meal Added to Order Items'\r\n          }\r\n        },\r\n        security: [\r\n          {\r\n            JWT: []\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    '/api/v1/orders/user': {\r\n      get: {\r\n        summary: 'Get Order Items for Logged In User',\r\n        tags: ['Orders'],\r\n        produces: ['application/json'],\r\n        responses: {\r\n          '401': {\r\n            description: 'Only Authenticated Users are Authorized'\r\n          },\r\n          '200': {\r\n            description: \"User's Order Items Retrieved\"\r\n          }\r\n        },\r\n        security: [\r\n          {\r\n            JWT: []\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    '/api/v1/orders/{orderId}': {\r\n      parameters: [\r\n        {\r\n          name: 'orderId',\r\n          in: 'path',\r\n          required: true,\r\n          description: 'ID of order item we want to work with',\r\n          type: 'string'\r\n        }\r\n      ],\r\n      put: {\r\n        summary: 'Update Order Item with give ID',\r\n        tags: ['Orders'],\r\n        requestBody: {\r\n          description: 'Input Data Format',\r\n          content: {\r\n            'application/json': {\r\n              schema: {\r\n                properties: {\r\n                  action: {\r\n                    type: 'string',\r\n                    description: 'Action to be carried out (increase, decrease or delete)'\r\n                  }\r\n                },\r\n                type: 'object'\r\n              }\r\n            }\r\n          }\r\n        },\r\n        responses: {\r\n          '401': {\r\n            description: 'Only Authenticated Users are Authorized'\r\n          },\r\n          '400': {\r\n            description: 'Validation Error'\r\n          },\r\n          '500': {\r\n            description: 'Order Item With Given ID does not exist'\r\n          },\r\n          '200': {\r\n            description: 'Order Item Updated'\r\n          }\r\n        },\r\n        security: [\r\n          {\r\n            JWT: []\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    '/api/v1/orders/checkout': {\r\n      post: {\r\n        summary: 'Checkout Orders',\r\n        tags: ['Orders'],\r\n        requestBody: {\r\n          description: 'Input Data Format',\r\n          content: {\r\n            'application/json': {\r\n              schema: {\r\n                properties: {\r\n                  billingAddress: {\r\n                    type: 'string',\r\n                    description: 'Billing Address for Order Delivery'\r\n                  }\r\n                },\r\n                type: 'object'\r\n              }\r\n            }\r\n          }\r\n        },\r\n        responses: {\r\n          '401': {\r\n            description: 'Only Authenticated Users are Authorized'\r\n          },\r\n          '400': {\r\n            description: 'Validation Error'\r\n          },\r\n          '200': {\r\n            description: 'Order Made'\r\n          }\r\n        },\r\n        security: [\r\n          {\r\n            JWT: []\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  components: {\r\n    securitySchemes: {\r\n      JWT: {\r\n        type: 'apiKey',\r\n        description:\r\n          'JWT token is received after registering/login, input format: \"Bearer \\\\<token\\\\>\"',\r\n        name: 'Authorization',\r\n        in: 'header'\r\n      }\r\n    }\r\n  }\r\n};\r\n"],"file":"swagger.js"}