{"version":3,"sources":["../../api/middleware/user.js"],"names":["UserMiddleware","req","res","next","schema","name","Joi","string","required","email","phone","number","min","password","validate","body","status","json","message","String","details","type"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;IAEMA,c;;;;;;;;;;;;+CAC0BC,G,EAAKC,G,EAAKC,I;;;;;;;AAE9BC,gBAAAA,M,GAAS;AACbC,kBAAAA,IAAI,EAAEC,aAAIC,MAAJ,GAAaC,QAAb,EADO;AAEbC,kBAAAA,KAAK,EAAEH,aAAIC,MAAJ,GACJE,KADI,GAEJD,QAFI,EAFM;AAKbE,kBAAAA,KAAK,EAAEJ,aAAIK,MAAJ,GACJC,GADI,CACA,EADA,EAEJJ,QAFI,EALM;AAQbK,kBAAAA,QAAQ,EAAEP,aAAIC,MAAJ,GACPK,GADO,CACH,CADG,EAEPJ,QAFO;AARG,iB;;uBAYTF,aAAIQ,QAAJ,CAAab,GAAG,CAACc,IAAjB,EAAuBX,MAAvB,C;;;AACND,gBAAAA,IAAI;;;;;;;iDAEGD,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAAA,MAAM,EAAE,OADkB;AAE1BE,kBAAAA,OAAO,EAAEC,MAAM,CAAC,YAAIC,OAAJ,CAAY,CAAZ,EAAeF,OAAhB,CAFW;AAG1BG,kBAAAA,IAAI,EAAE;AAHoB,iBAArB,C;;;iDAMF,I;;;;;;;;;;;;;;;;;;;;;gDAGkBpB,G,EAAKC,G,EAAKC,I;;;;;;;AAE3BC,gBAAAA,M,GAAS;AACbK,kBAAAA,KAAK,EAAEH,aAAIC,MAAJ,GACJE,KADI,GAEJD,QAFI,EADM;AAIbK,kBAAAA,QAAQ,EAAEP,aAAIC,MAAJ,GACPK,GADO,CACH,CADG,EAEPJ,QAFO;AAJG,iB;;uBAQTF,aAAIQ,QAAJ,CAAab,GAAG,CAACc,IAAjB,EAAuBX,MAAvB,C;;;AACND,gBAAAA,IAAI;;;;;;;kDAEGD,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAAA,MAAM,EAAE,OADkB;AAE1BE,kBAAAA,OAAO,EAAEC,MAAM,CAAC,aAAIC,OAAJ,CAAY,CAAZ,EAAeF,OAAhB,CAFW;AAG1BG,kBAAAA,IAAI,EAAE;AAHoB,iBAArB,C;;;kDAMF,I;;;;;;;;;;;;;;;;;;;;;eAIIrB,c","sourcesContent":["import Joi from 'joi';\r\n\r\nclass UserMiddleware {\r\n  static async validateRegister(req, res, next) {\r\n    try {\r\n      const schema = {\r\n        name: Joi.string().required(),\r\n        email: Joi.string()\r\n          .email()\r\n          .required(),\r\n        phone: Joi.number()\r\n          .min(11)\r\n          .required(),\r\n        password: Joi.string()\r\n          .min(7)\r\n          .required()\r\n      };\r\n      await Joi.validate(req.body, schema);\r\n      next();\r\n    } catch (err) {\r\n      return res.status(400).json({\r\n        status: 'error',\r\n        message: String(err.details[0].message),\r\n        type: 'validation'\r\n      });\r\n    }\r\n    return true;\r\n  }\r\n\r\n  static async validateLogin(req, res, next) {\r\n    try {\r\n      const schema = {\r\n        email: Joi.string()\r\n          .email()\r\n          .required(),\r\n        password: Joi.string()\r\n          .min(7)\r\n          .required()\r\n      };\r\n      await Joi.validate(req.body, schema);\r\n      next();\r\n    } catch (err) {\r\n      return res.status(400).json({\r\n        status: 'error',\r\n        message: String(err.details[0].message),\r\n        type: 'validation'\r\n      });\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\nexport default UserMiddleware;\r\n"],"file":"user.js"}