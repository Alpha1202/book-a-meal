{"version":3,"sources":["../../api/middleware/meals.js"],"names":["MealMiddleware","req","res","next","schema","name","Joi","string","required","price","number","min","validate","body","files","Error","imageMimes","includes","image","mimetype","details","undefined","message","String","status","json","type","mealId","quantity"],"mappings":"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","sourcesContent":["import Joi from 'joi';\r\n\r\nclass MealMiddleware {\r\n  static async validateAddMeal(req, res, next) {\r\n    try {\r\n      const schema = {\r\n        name: Joi.string().required(),\r\n        price: Joi.number()\r\n          .min(1)\r\n          .required()\r\n      };\r\n      await Joi.validate(req.body, schema);\r\n      if (req.files === null) {\r\n        throw new Error('Meal Image Required');\r\n      }\r\n      const imageMimes = ['image/jpeg', 'image/jpg', 'image/png'];\r\n      if (!imageMimes.includes(req.files.image.mimetype)) {\r\n        throw new Error('Only JPG, JPEG & PNG Images are allowed');\r\n      }\r\n      next();\r\n      return true;\r\n    } catch (err) {\r\n      let message;\r\n      if (err.details !== undefined) {\r\n        message = String(err.details[0].message);\r\n      } else {\r\n        message = String(err.message);\r\n      }\r\n      return res.status(400).json({\r\n        status: 'error',\r\n        message,\r\n        type: 'validation'\r\n      });\r\n    }\r\n  }\r\n\r\n  static async validateUpdateMeal(req, res, next) {\r\n    try {\r\n      const schema = {\r\n        name: Joi.string(),\r\n        price: Joi.number().min(1)\r\n      };\r\n      await Joi.validate(req.body, schema);\r\n      if (req.files !== null) {\r\n        const imageMimes = ['image/jpeg', 'image/jpg', 'image/png'];\r\n        if (!imageMimes.includes(req.files.image.mimetype)) {\r\n          throw new Error('Only JPG, JPEG & PNG Images are allowed');\r\n        }\r\n      }\r\n      next();\r\n      return true;\r\n    } catch (err) {\r\n      let message;\r\n      if (err.details !== undefined) {\r\n        message = String(err.details[0].message);\r\n      } else {\r\n        message = String(err.message);\r\n      }\r\n      return res.status(400).json({\r\n        status: 'error',\r\n        message,\r\n        type: 'validation'\r\n      });\r\n    }\r\n  }\r\n\r\n  static async validateAddMealToMenu(req, res, next) {\r\n    try {\r\n      const schema = {\r\n        mealId: Joi.number().required(),\r\n        quantity: Joi.number()\r\n          .min(1)\r\n          .required()\r\n      };\r\n      await Joi.validate(req.body, schema);\r\n      next();\r\n      return true;\r\n    } catch (err) {\r\n      let message;\r\n      if (err.details !== undefined) {\r\n        message = String(err.details[0].message);\r\n      } else {\r\n        message = String(err.message);\r\n      }\r\n      return res.status(400).json({\r\n        status: 'error',\r\n        message,\r\n        type: 'validation'\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default MealMiddleware;\r\n"],"file":"meals.js"}